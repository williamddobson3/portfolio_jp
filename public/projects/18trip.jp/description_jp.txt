
## プロジェクト概要

**プロジェクト名:** 18trip.jp

**プロジェクト種別:** 旅行・体験型リスティング＆予約サイト（目的に応じて適宜変更）

**プロジェクト概要（簡潔版）:**
日本国内の厳選された旅行プラン、アクティビティ、ガイドを発見・閲覧し、（オプションで）予約できる、レスポンシブ対応かつSEO対策済みの旅行体験サイト。サイトは、洗練されたUX、高速なパフォーマンス、画像重視のコンテンツ、編集者向けの容易なコンテンツ管理に重点を置いています。

**私の役割:** フルスタック開発者 — アーキテクチャ、フロントエンド、バックエンドAPI設計、データベーススキーマ、CI/CD、デプロイ、パフォーマンスチューニング、SEOおよびアクセシビリティ改善、サードパーティサービスとの連携を担当。（他者と共同作業した場合は、「フルスタック」を実際の役割に置き換え、協力者を明記してください。）

**プロジェクト期間とタイムライン：**

* 企画・ワイヤーフレーム：1～2週間
* MVP開発（基本リストページ、検索機能、個別旅行ページ）：4～6週間
* CMS／編集・管理ツール：2～3週間
* パフォーマンス調整、SEO対策、仕上げ：1～2週間
* リリースとリリース後の修正：2～4週間

*(実際の開始/終了日またはスプリント数に置き換えてください。)*

---

## 目標と成功基準

* 旅行体験向けのモダンで高速、モバイルファーストなリスティングサイトを提供すること。
* モバイルとデスクトップで2秒未満のファースト・ミーニングフルペイントを達成すること。
* ロングテール旅行関連キーワードで競争可能なSEO最適化ページを実現する。
* 非技術系編集者がCMSまたは管理パネル経由でコンテンツを追加・更新できるようにする。
* 主要ページにおけるアクセシビリティ（WCAG 2.1 AA基準）を確保する。

---

## 技術スタック（使用技術とその理由）

* **フロントエンド:** React（またはVue/Nuxt/Next）— コンポーネント駆動型UI、SEO対策のためのSSR/SSGオプション。
* **スタイリング:** Tailwind CSSまたはカスタムSCSS — 高速開発と一貫したスペースシステム。
* **ルーティング/SSR:** Next.js（推奨）またはNuxt — SEO重要ページ向けのサーバーサイドレンダリングと静的生成。
* **バックエンド / API:** Node.js + Express/Fastify またはサーバーレスアプローチ（AWS Lambda、Vercel Functions） — 軽量、高速、スケーラブル。
* **データベース:** リレーショナルデータ（旅行、ユーザー、予約）にはPostgreSQL、キャッシュとレート制限にはRedis。
* **ストレージ＆CDN:** 画像用S3互換ストレージ + グローバル配信用CloudFront / BunnyCDN / Fastly。
* **検索:** 即時検索・誤入力許容検索・フィルタリング用AlgoliaまたはElasticsearch。
* **認証:** リフレッシュトークン付きJWTベース認証、またはサードパーティログイン用OAuth。
* **CMS / 管理画面:** Strapi / Contentful / Netlify CMS、または編集者向けカスタム管理UI（同一APIで駆動）。
* **分析:** Google Analytics / GA4 + Google Search Console、オプションでセッション記録用Hotjar。
* **デプロイ:** VercelまたはNetlify（フロントエンド）、Heroku / Railway / AWS ECSまたはサーバーレス（バックエンド）。
* **CI/CD:** テスト、ビルド、リンティング、デプロイのパイプラインにGitHub Actionsを使用。

*異なるツールを使用した場合、実際に使用した技術に置き換えてください。*

---

## アーキテクチャとデータフロー（概要）

1. **クライアント**: 公開ページはサーバーサイドレンダリング対応のReact SPA（Next.js）。可能な限り旅行ページは静的生成。
2. **エッジ/CDN**: CDNが事前レンダリング済みの静的アセットと画像を配信。
3. **APIゲートウェイ/サーバー**: Node.js APIが検索、詳細ページ、管理操作、ユーザー認証用のJSONエンドポイントを提供。
4. **データベース**: PostgreSQLが正規データを保存：旅行情報、場所、カテゴリ、ユーザープロフィール、予約、レビュー。
5. **キャッシュ**: Redisが頻繁に参照されるAPIレスポンス（上位リスト、ホームページ）をキャッシュし、セッショントークンを保存。
6. **検索**: 迅速なフィルタ検索のため、旅行ページをAlgoliaにインデックス化。
7. **CMS**: 編集者はStrapiまたは管理パネルでコンテンツを作成。コンテンツ更新時に再インデックス化と静的再生成をトリガー。

---

## 実装済み主要機能

### 1) ホームページ & 発見機能

* 高速LCP最適化対応のヒーロー画像カルーセル（下記参照）。
* 厳選カテゴリとロケーションチップ。
* トレンド/注目体験（遅延読み込みとプレースホルダー画像対応）。

### 2) 検索＆フィルタリング

* オートコンプリート（Algolia）とマルチファセットフィルタ（価格、所要時間、難易度、地域）を備えたインスタント検索。
* URL同期クエリパラメータにより、検索結果の共有とクロールを可能化。

### 3) 旅行詳細ページ

* 高品質ヒーロー画像、レスポンシブ対応`srcset`と`loading=「lazy」`対応ギャラリー。
* SERP表示強化のためのschema.org `TouristTrip` / `Event`向け構造化データ（JSON-LD）。
* 進捗表示付き明確なCTA（問い合わせ/予約）とモーダル予約フロー。

### 4) 編集・管理機能

* 旅行プラン・画像・タグ・構造化旅程・見どころ・FAQを追加する編集者インターフェース。
* 画像アップロードパイプライン（リサイズ・WebP変換・代替テキスト入力プロンプト対応）。

### 5) ユーザー認証・予約機能（該当する場合）

* セキュアな認証エンドポイント、セッション管理、予約作成、確認メール。
* サーバーサイド決済インテントとウェブフックを備えた決済ゲートウェイ（Stripe）との連携。

### 6) 国際化（オプション）

* 日本語その他言語対応時のSEO対策として、ロケール対応ルートと`hreflang`タグ。

---

## フロントエンド詳細

* **コンポーネント設計：** アトミックパターン —