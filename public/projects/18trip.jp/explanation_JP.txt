## プロジェクト概要

**プロジェクト名:** 18TRIP（エイティーントリップ）

**プロジェクトタイプ:** 近未来おもてなしアドベンチャーゲーム・アニメプロジェクト

**プロジェクト概要（短縮版）:**
近未来の日本を舞台にした、観光業の競争が激化する世界で、落ちぶれた観光特区HAMA18区の立て直しに奮闘する主人公の物語。カセットテープのメタファーを使った記憶システムと、キャラクター駆動のストーリーテリングが特徴のモバイルゲーム・アニメプロジェクト。

**私の役割:** フルスタック開発者 — アーキテクチャ、フロントエンド、バックエンドAPI設計、データベーススキーマ、CI/CD、デプロイメント、パフォーマンスチューニング、SEO・アクセシビリティ改善、サードパーティサービス統合を担当。

**プロジェクト期間・タイムライン:**

* 企画・ワイヤーフレーム: 1–2週間
* MVP開発（コアゲーム機能、キャラクターシステム、ストーリーページ）: 4–6週間
* CMS・編集・管理ツール: 2–3週間
* パフォーマンス、SEO、仕上げ: 1–2週間
* ローンチ・ローンチ後修正: 2–4週間

---

## 目標・成功基準

* モダンで高速、モバイルファーストのゲームプラットフォームを提供
* モバイル・デスクトップで2秒未満のファースト・ミーニングフル・ペイントを達成
* 長尾キーワードで競合するSEO最適化ページ
* 非技術的編集者がCMSや管理パネルでコンテンツを追加・更新できるようにする
* 主要ページでアクセシビリティ（WCAG 2.1 AA基準）を確保

---

## 技術スタック（使用技術と理由）

* **フロントエンド:** React/Next.js — コンポーネント駆動UI、SEO用SSR/SSGオプション
* **スタイリング:** Tailwind CSS — 高速開発と一貫したスペーシングシステム
* **ルーティング/SSR:** Next.js — SEO重要ページのサーバーサイドレンダリングと静的生成
* **バックエンド/API:** Node.js + Express — 軽量、高速、スケーラブル
* **データベース:** PostgreSQL（リレーショナルデータ用）、Redis（キャッシュ・レート制限用）
* **ストレージ・CDN:** S3互換ストレージ + CloudFront/BunnyCDN/Fastly（グローバル配信）
* **検索:** Algolia（インスタント、タイポ耐性検索・フィルター）
* **認証:** JWTベース認証、リフレッシュトークン、OAuth（サードパーティログイン）
* **CMS/管理:** カスタム管理UI（API駆動）で編集者向け
* **分析:** Google Analytics/GA4 + Google Search Console、Hotjar（セッション録画）
* **デプロイメント:** Vercel（フロントエンド）、AWS ECS（バックエンド）
* **CI/CD:** GitHub Actions（テスト、ビルド、リント、デプロイパイプライン）

---

## アーキテクチャ・データフロー（概要）

1. **クライアント**: React SPA、公開ページはサーバーサイドレンダリング（Next.js）
2. **エッジ/CDN**: CDNがプリレンダリングされた静的アセットと画像を配信
3. **APIゲートウェイ/サーバー**: Node.js APIがJSONエンドポイントを提供
4. **データベース**: PostgreSQLが正規データを保存（ゲームデータ、ユーザー、進行状況）
5. **キャッシュ**: Redisが頻繁に読み取られるAPIレスポンスをキャッシュ
6. **検索**: ゲームページをAlgoliaにインデックス化して高速検索
7. **CMS**: 編集者がStrapiやカスタム管理パネルでコンテンツを作成

---

## 実装した主要機能

### 1) ホームページ・発見機能

* 高速LCP最適化のヒーロー画像カルーセル
* キュレーションされたカテゴリーとロケーション
* トレンド/注目の体験（遅延読み込み・プレースホルダー画像）

### 2) 検索・フィルタリング

* インスタント検索（Algolia）とマルチファセットフィルター
* 共有・クロール可能なURL同期クエリパラメータ

### 3) ゲーム詳細ページ

* 高品質ヒーロー画像、レスポンシブ`srcset`と`loading="lazy"`のギャラリー
* 構造化データ（JSON-LD）でschema.org `Game`/`Event`をSERP表示向上
* 明確なCTA（連絡/予約）とプログレス/モーダル予約フロー

### 4) 編集・管理

* ゲーム追加、画像、タグ、構造化ストーリー、ハイライト、FAQの編集者インターフェース
* リサイズ、WebP変換、alt-textプロンプト付き画像アップロードパイプライン

### 5) ユーザー認証・予約（該当する場合）

* セキュア認証エンドポイント、セッション処理、予約作成、確認メール
* サーバーサイドペイメントインテントとウェブフック付きStripe統合

### 6) 国際化（オプション）

* 複数言語サポート時のSEO用ロケール対応ルートと`hreflang`タグ

---

## フロントエンド詳細

* **コンポーネント設計:** アトミックパターン — `Hero`, `GameCard`, `FilterPanel`, `Gallery`, `BookingModal`
* **状態管理:** React Query（サーバー状態）+ ローカルコンポーネント状態（UI操作）
* **アクセシビリティ:** セマンティックHTML、キーボード操作可能カルーセル、スキップリンク
* **レスポンシブ:** モバイルファーストブレークポイント、流動的タイポグラフィ
* **画像処理:** ビルド時/アップロード時処理（Sharp）で複数サイズ・フォーマット生成
* **SSR/SSG:** 高トラフィックゲームページのプリレンダリング実装

---

## バックエンド詳細

* **API設計:** 明確なリソース分離のRESTfulエンドポイント
* **バリデーション:** Joi/Zodでリクエストバリデーションと型安全性
* **セキュリティ:** レート制限、入力サニタイゼーション、helmetでHTTPヘッダー
* **メール:** SendGrid/SESでトランザクションメール（予約確認、パスワードリセット）
* **ウェブフック:** ペイメントゲートウェイウェブフックハンドラー

---

## DevOps、CI/CD・デプロイメント

* **リポジトリ構造:** `apps/web`と`apps/api`のモノレポ
* **CIパイプライン:** GitHub Actions（リント → 単体テスト → ビルド → デプロイ）
* **プレビュー環境:** 各プルリクエストの自動デプロイプレビュー
* **監視・ログ:** Sentry（フロント・バックエンドエラー監視）
* **バックアップ・移行:** 管理DBバックアップとKnex/TypeORM/Flyway移行スクリプト

---

## パフォーマンス最適化

* **クリティカルレンダリングパス:** ヒーローセクションのクリティカルCSSインライン化
* **コード分割・遅延読み込み:** 重いコンポーネント（マップ、カレンダー、ギャラリービューアー）の動的インポート
* **画像最適化:** 自動フォールバック付きモダンフォーマット使用
* **キャッシュ:** 静的ページ用CDNキャッシュ、API用stale-while-revalidate
* **メトリクス:** CIでLighthouseスコア追跡、回帰ブロック閾値設定

---

## SEO・コンテンツ戦略

* **技術的SEO:** クリーンURL、canonicalタグ、`hreflang`（複数ロケール時）、XMLサイトマップ
* **オンページSEO:** タイトル/メタテンプレート、構造化データJSON-LD、セマンティック見出し
* **コンテンツ:** 目的地キーワードとゲームページに紐づくロングフォーム編集コンテンツ

---

## アクセシビリティ

* 主要ページの手動キーボードテストと自動チェック（axe）実行
* スキップリンク、高コントラストフォーカスアウトライン、ARIA属性実装
* アクセシビリティトレードオフと将来スプリントの修正計画文書化

---

## テスト・QA

* **単体テスト:** ユーティリティ関数と小さなコンポーネント用Jest
* **統合テスト:** 検索、フィルター、ゲーム詳細、予約フロー、ログイン/リセット用Cypress
* **視覚回帰:** 主要ページ用Chromatic/Percyスナップショット
* **負荷テスト:** 期待ピーク負荷下でのバックエンド検証用k6/Artillery

---

## セキュリティ考慮事項

* **OWASP基本:** 入力サニタイゼーション、パラメータ化クエリ、セキュアヘッダー、CSP
* **シークレット:** デプロイメントプラットフォームの暗号化環境変数
* **権限:** 管理パネルのロールベースアクセス制御とコンテンツ変更監査ログ

---

## 課題・解決策

### 画像重いページによる遅いLCP

**解決策:** SharpでAVIF/WebP自動生成、低品質画像プレースホルダー（LQIP）、最大ヒーロー画像のプリロード実装

### DBのみアプローチでの検索・フィルタリングの遅さ

**解決策:** インスタント結果用Algoliaに検索をオフロード、コンテンツ更新時の増分インデックス化実装

### 非技術編集者の編集ワークフローの簡素化

**解決策:** コンテンツバリデーションとメディアワークフロー付き軽量CMS（Strapi）実装

### JSフレームワーク使用時のSEO管理

**解決策:** クロール可能性の高いページ用Next.js静的生成、クローラー用サーバーレンダリング検索エンドポイント、サーバーサイド構造化データ実装

---

## 結果・インパクト

* 有機トラフィック成長: 3ヶ月後月次**+X%**
* 平均ページ読み込み時間: 最適化後**Y秒**（デスクトップ）/ **Z秒**（モバイル）
* コンバージョン率（問い合わせ/予約）: **A%**
* 編集公開時間: CMSロールアウト後**N時間**から**M分**に短縮