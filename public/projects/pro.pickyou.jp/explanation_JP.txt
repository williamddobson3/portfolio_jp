PICKYOU PRO — 開発事例研究

プロジェクト
PICKYOU PRO — モデル、アーティスト、クリエイター（「PICKER」）が中古品やファッションアイテムを販売するキュレーション型マーケットプレイス。ストアフロントでは、厳選されたPICKERプロフィール、カテゴリー/ブランド別に分類された商品リスト、カートとチェックアウトフロー、公開ポリシー/FAQページを提供。

私の役割
リード開発者／フルスタックエンジニア — コンセプトから本番環境までプロダクトを主導：プロダクトアーキテクチャ、フロントエンドUI/UX、プラットフォームサービスとの連携、パフォーマンス最適化、QAとデプロイを担当し、運用マニュアルを運用／マーケティングチームに引き継ぎました。

タイムライン
デザイン → MVPまで6～8週間。その後8～12週間で機能を追加展開（出品者プロフィール、高度なフィルタリング、モバイルUX改善）。

課題と目標

個々のクリエイターやモデルのファンを対象とした、シンプルで高コンバージョン率のEC体験を提供：出品者「ピッカー」を発見し、商品を閲覧し、素早く購入できる仕組み。

編集キュレーション（注目のピッカー／人気商品）を提供しつつ、ビジネスチームが製品管理を容易に行えるようにする。

高速なモバイル体験（ユーザー層はモバイル中心）、SEOによる発見可能性、マーケティングチャネル（Instagram／TikTok／X／YouTube／Pinterest）との容易な連携を確保する。

ソリューションと高レベルアーキテクチャ

プラットフォームアプローチ

商品カタログ、顧客アカウント、カート、決済機能はShopifyストアフロントバックエンドで管理（サイトはShopifyストアフロントドメインを参照）。Shopifyをコマースエンジンとして採用したことで、決済・注文管理・在庫管理の市場投入時間を大幅に短縮。

カスタムドメイン（pro.pickyou.jp）上のカスタムフロントエンドテーマをShopifyテーマ（Liquid + HTML/CSS/vanilla JS）として実装。UXとパフォーマンス向上のため、クライアントサイドに特化した機能強化を実施。

理由：Shopifyが決済と管理を担当。カスタムテーマにより、正確なレイアウト、編集ページ、SEO制御を実現しつつ、事業部門の運用を簡素化。

法的/ポリシーコンテンツにはNotionホストのポリシー/FAQページをリンク（非技術スタッフ向け高速編集ページ）。

概念図：
クライアントブラウザ（レスポンシブUI） ↔ カスタムShopifyテーマ（Liquid + JS） ↔ Shopify API（注文・商品・顧客） ↔ 管理画面（Shopify + Notionによるポリシー管理）

実装した主要機能

ホームページ／カテゴリー駆動型発見機能

カテゴリー（アウター、トップス、パンツ、シューズ等）のマルチレベルナビゲーションと、ブランド別／PICKER別発見をサポートするブランドリスト。ナビゲーション構造はShopifyコレクションとテーマナビデータで駆動。

PICKERプロフィール＆キュレーションコレクション

各PICKERには、アイテムと短い編集コメントを表示するプロフィールページを設置。ホームページには編集マーケティング用の注目PICKERカルーセルを設置。（カスタムコレクションテンプレートとメタフィールドで実装）

商品一覧＆商品ページ

在庫切れ状態、価格表示、サムネイル、ホバー状態を備えたグリッド/リスト表示。商品ページには画像ギャラリー、サイズ/状態メタデータ、「カートに入れる」ボタンを配置。在庫切れラベルは在庫データから動的に表示されます。

カートと顧客フロー

クライアントサイドのカート操作（AJAXによる追加/削除、ミニカートUI）＋安全な決済と注文処理のためのShopifyチェックアウト。

アカウントと認証

顧客アカウントはShopify Customersで管理。ログイン/新規登録フローはテーマヘッダーに統合。

編集・ポリシーページ

FAQ、利用規約、プライバシーポリシー、特定商取引法対応ページはNotionページへリンクし、ビジネス情報の迅速な更新を実現。

ソーシャル＆マーケティング連携

フッターにInstagram、X（Twitter）、TikTok、YouTube、Pinterestへのリンクを設置し、オーガニックマーケティングとトラフィックチャネルを確保。

技術詳細 — スタックと実装

フロントエンド

テーマ構造と商品/コレクションテンプレートにはShopify Liquidテンプレートを採用。

保守性を考慮し、HTML5、セマンティックマークアップ、BEM風CSS構造を採用。

CSS: モバイルファーストのレスポンシブレイアウト（flexbox + grid）、適切な箇所にユーティリティクラスを適用。

JS：最小限のvanilla JS＋AJAXカート操作、軽量DOM更新、遅延画像読み込み用の小型ヘルパーモジュール。

画像処理：srcset＋sizesと遅延読み込みを採用し、モバイルとデスクトップに適切なサイズの画像を提供。

バックエンド／プラットフォーム

Shopify（商品、コレクション、顧客、注文、在庫）。

ポリシーと長文コンテンツはNotionでホスト（サイトからリンク）し、非開発者によるコンテンツ更新を可能化。

デプロイ／CI

テーマコードはGitでバージョン管理。

メインブランチへのマージ時に自動デプロイパイプラインをShopifyへ実行（Theme Kit / Shopify CLI）。

QAおよび本番環境移行用のステージングプレビューテーマを用意。

パフォーマンスとスケーリング

Shopify標準のCDNをアセットと画像に適用。

画面上部のコンテンツにはクリティカルCSSをインライン化、非クリティカルなCSS/JSは遅延読み込み、画像には遅延読み込みを実装。

TTFB削減とリピート訪問の高速化のため、キャッシュヘッダーとHTTP/2（Shopify標準）を活用。



SEOとアクセシビリティ

クロール可能な商品ページのためのサーバーレンダリングHTML（Liquid）。

SERPリッチリザルト向上のため、商品向け構造化データ（JSON-LD）を実装（価格、在庫状況、SKU）。

意味的な見出し、画像のalt属性、キーボード操作可能なナビゲーション。

XMLサイトマップとrobotsルールはShopify設定／テーマ設定で管理。

例文スニペット（ポートフォリオに貼り付け可能）

Liquid: 製品カード（簡略版）

<div class="product-card">
  <a href="{{ product.url }}">
    <img src="{{ product.featured_image | img_url: 『600x』 }}" 
         srcset="{{ product.featured_image | img_url: 『600x』 }} 600w, {{ product.featured_image | img_url: 『1200x』 }} 1200w"
         sizes=「(max-width: 600px) 100vw, 33vw」
         alt="{{ product.title }}">
    {% if product.available == false %}
      <span class="badge sold-out">SOLD OUT</span>
    {% endif %}
    <h3>{{ product.title }}</h3>
    <p class="price">{{ product.price | money }}</p>
  </a>
</div>


Vanilla JS: 最小限のAJAXによるカート追加

async function addToCart(variantId, qty=1){
  const res = await fetch(『/cart/add.js』, {
    method: 『POST』,
    headers: { 『Content-Type』: 『application/json』 },
    body: JSON.stringify({ id: variantId, quantity: qty })
  });
  const data = await res.json();
  // ミニカートUIを更新...
}

テストとQA

クロスブラウザテスト（Chrome、Safari、Firefox）および実機モバイルテスト。

axe-coreによるアクセシビリティ監査と手動キーボードテスト。

PRでのパフォーマンス/SEO退行を自動検知するLighthouse監査。

主要決済方法とエッジケース（カート内の品切れ商品、住所検証）に対する手動チェックアウトテストマトリックス。

セキュリティとコンプライアンス

HTTPS強制適用（Shopify SSL）。

チェックアウトと決済はShopifyのPCI準拠ワークフローで処理 — カスタムサーバーへのカードデータ保存なし。

プライバシーポリシーと利用規約ページはNotion経由でリンク・更新管理し、法的更新を効率化。

課題と解決策

PICKERアップロードによる大容量画像セット

問題：高解像度画像によるモバイル表示速度の低下。

解決策：Shopify画像変換で複数サイズを生成、srcset/sizesと遅延読み込みを採用。メイン画像読み込み中はぼかし処理した低解像度プレースホルダー（LQIP）を表示。

編集レイアウトと商品主導型Shopifyコレクションの共存

課題：商品データを標準化しつつ、編集キュレーション（特集ピッカーやスタイリング済みセクション）を実装する必要性。

解決策：Shopifyメタフィールド＋カスタムコレクションで編集グループ化を実現。キュレーションコンテンツはShopify管理画面のテーマ設定で管理。

非技術スタッフによるポリシー更新

課題：法務チームが開発者デプロイなしでページ更新を可能にすること。

解決策：ポリシーをNotion公開ページにリンクし、リンク/更新のための内部プロセスを追加。

成果と指標（例／モデル文）

Shopifyの決済・注文機能活用による市場投入期間の短縮（MVPローンチ約6～8週間）。

モバイルパフォーマンス：画像/クリティカルCSS最適化後、初期LighthouseスコアがXポイント改善（実際の数値を挿入）。

明確なピッカープロフィールと「注目ピッカー」編集セクションによるコンバージョン改善 — A/Bテストで測定（コンバージョン向上率があれば数値を挿入）。

（実際の指標を提供いただければ、正確な数値とグラフを挿入可能です）

学びと今後のロードマップ

学び：プラットフォームのトレードオフをバランスさせる重要性 — Shopifyは迅速なコマース機能を提供したが、編集の柔軟性にはLiquidとメタフィールドの慎重な設計が必要だった。

優先的に取り組む今後の改善点

高度な検索／ファセットフィルタリング（サイズ、状態、ブランド、ピックアップ別）。

ピッカー向けオンボーディング＆ダッシュボード（クリエイター自身が出品を管理可能に）。

マーケティング連携の深化（UTM＋チャネルアトリビューション、ソーシャル広告用クリエイティブ／商品フィード）。

オフライン環境とホーム画面追加体験を向上させるプログレッシブウェブアプリ（PWA）機能。

LinkedInや履歴書に貼れる簡潔な経歴／箇条書き

PICKYOU PRO（pro.pickyou.jp）リード開発者 — クリエイター＆モデル向けキュレーション型マーケットプレイス。カスタムShopifyテーマ（Liquid＋HTML/CSS/JS）を構築。カテゴリー＆ブランド検索、ピッカープロフィール、レスポンシブ商品ページ、AJAXカート、Notion連携ポリシーページを実装。モバイルパフォーマンス向けに画像とクリティカルレンダリングパスを最適化、SEO構造化データを実装。